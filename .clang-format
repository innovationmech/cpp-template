# =============================================================================
# .clang-format - Code Formatting Configuration for cpp-template
# Based on Google style with modern C++ adaptations
#
# This configuration ensures consistent code formatting across the project.
# Run formatting with: clang-format -i file.cpp
# Or use CMake targets: cmake --build build --target format
# =============================================================================

# Base style - Google style with customizations
BasedOnStyle: Google

# Language and standard
Language: Cpp
Standard: c++17

# Line length and column management
ColumnLimit: 100
TabWidth: 4
IndentWidth: 4
UseTab: Never

# Indentation settings
IndentCaseLabels: true
IndentPPDirectives: BeforeHash
IndentExternBlock: Indent
IndentGotoLabels: false
IndentRequires: true
IndentWrappedFunctionNames: false

# Access modifier indentation
AccessModifierOffset: -2

# Namespace indentation
NamespaceIndentation: None
CompactNamespaces: false

# Function and class formatting
AllowShortFunctionsOnASingleLine: Inline
AllowShortLambdasOnASingleLine: All
AllowShortIfStatementsOnASingleLine: Never
AllowShortLoopsOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortBlocksOnASingleLine: Empty
AllowShortEnumsOnASingleLine: false

# Brace formatting
BreakBeforeBraces: Attach
BraceWrapping:
  AfterCaseLabel: false
  AfterClass: false
  AfterControlStatement: Never
  AfterEnum: false
  AfterFunction: false
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# Line breaking and wrapping
BreakBeforeBinaryOperators: None
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeColon
BreakInheritanceList: BeforeColon
BreakStringLiterals: true

# Constructor and member initializer formatting
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth: 4
Cpp11BracedListStyle: true

# Template and concept formatting
AlwaysBreakTemplateDeclarations: Yes
BreakBeforeConceptDeclarations: true

# Pointer and reference alignment
PointerAlignment: Left
ReferenceAlignment: Left
DerivePointerAlignment: false

# Spacing configuration
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInAngles: Never
SpacesInConditionalStatement: false
SpacesInContainerLiterals: true
SpacesInCStyleCastParentheses: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInParentheses: false
SpacesInSquareBrackets: false

# Alignment configuration
AlignAfterOpenBracket: Align
AlignArrayOfStructures: Right
AlignConsecutiveAssignments: None
AlignConsecutiveBitFields: None
AlignConsecutiveDeclarations: None
AlignConsecutiveMacros: None
AlignEscapedNewlines: Left
AlignOperands: Align
AlignTrailingComments: true

# Include sorting and grouping
SortIncludes: CaseSensitive
IncludeBlocks: Preserve

# Other formatting options
AllowAllArgumentsOnNextLine: true
AllowAllConstructorInitializersOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true
BinPackArguments: true
BinPackParameters: true
KeepEmptyLinesAtTheStartOfBlocks: false
MaxEmptyLinesToKeep: 1

# Penalties for line breaking (lower = more likely to break)
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 200

# Macro and attribute handling
AttributeMacros:
  - __capability
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IfMacros:
  - KJ_IF_MAYBE
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
TypenameMacros:
  - STACK_OF
  - LIST

# Comment formatting
ReflowComments: true
CommentPragmas: '^ IWYU pragma:'

# Disable formatting for specific regions (use // clang-format off/on)
DisableFormat: false
SortUsingDeclarations: true

# Modern C++ features
BitFieldColonSpacing: Both
