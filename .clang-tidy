# =============================================================================
# .clang-tidy - Static Analysis Configuration for cpp-template
# Comprehensive C++ linting configuration for modern C++17 projects
#
# This configuration enables extensive static analysis checks to improve
# code quality, catch bugs, and enforce modern C++ best practices.
# =============================================================================

# Checks configuration
# Format: category-check-name or -category-check-name to disable
Checks: >
  bugprone-*,
  cert-*,
  clang-analyzer-*,
  concurrency-*,
  cppcoreguidelines-*,
  google-*,
  hicpp-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  -cert-dcl21-cpp,
  -cert-dcl58-cpp,
  -cert-err58-cpp,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-pro-type-union-access,
  -cppcoreguidelines-pro-type-vararg,
  -google-readability-avoid-underscore-in-googletest-name,
  -google-readability-todo,
  -hicpp-avoid-c-arrays,
  -hicpp-no-array-decay,
  -hicpp-uppercase-literal-suffix,
  -hicpp-vararg,
  -misc-non-private-member-variables-in-classes,
  -modernize-avoid-c-arrays,
  -modernize-use-nodiscard,
  -modernize-use-trailing-return-type,
  -readability-avoid-const-params-in-decls,
  -readability-magic-numbers,
  -readability-named-parameter,
  -readability-uppercase-literal-suffix

# Warning-as-error configuration
# Treat specific categories as errors to enforce compliance
WarningsAsErrors: >
  bugprone-*,
  cert-*,
  concurrency-*,
  misc-*,
  performance-*

# Header filter - which headers to analyze
# Only analyze project headers, not system/third-party headers
HeaderFilterRegex: '^.*(include|src)/.*\.(h|hpp|hxx)$'

# Analysis options
AnalyzeTemporaryDtors: false
FormatStyle: file  # Use .clang-format configuration

# System headers - paths to exclude from analysis
SystemHeaders: false

# Check-specific configuration options
CheckOptions:
  # Readability checks
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.EnumCase
    value: CamelCase
  - key: readability-identifier-naming.FunctionCase
    value: camelBack
  - key: readability-identifier-naming.MethodCase
    value: camelBack
  - key: readability-identifier-naming.VariableCase
    value: camelBack
  - key: readability-identifier-naming.ParameterCase
    value: camelBack
  - key: readability-identifier-naming.MemberCase
    value: camelBack
  - key: readability-identifier-naming.PrivateMemberSuffix
    value: '_'
  - key: readability-identifier-naming.ProtectedMemberSuffix
    value: '_'
  - key: readability-identifier-naming.MacroCase
    value: UPPER_CASE
  - key: readability-identifier-naming.ConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.EnumConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.GlobalConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.StaticConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.TypeAliasCase
    value: CamelCase
  - key: readability-identifier-naming.TypedefCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase

  # Function length limits
  - key: readability-function-size.LineThreshold
    value: '80'
  - key: readability-function-size.StatementThreshold
    value: '800'
  - key: readability-function-size.BranchThreshold
    value: '20'
  - key: readability-function-size.ParameterThreshold
    value: '8'
  - key: readability-function-size.NestingThreshold
    value: '4'
  - key: readability-function-size.VariableThreshold
    value: '20'

  # Modernize options
  - key: modernize-loop-convert.MaxCopySize
    value: '16'
  - key: modernize-loop-convert.MinConfidence
    value: reasonable
  - key: modernize-loop-convert.NamingStyle
    value: CamelCase

  # Performance options
  - key: performance-for-range-copy.WarnOnAllAutoCopies
    value: true
  - key: performance-inefficient-vector-operation.EnableProto
    value: false
  - key: performance-move-const-arg.CheckTriviallyCopyableMove
    value: true
  - key: performance-type-promotion-in-math-fn.IncludeStyle
    value: llvm

  # Google style options
  - key: google-readability-braces-around-statements.ShortStatementLines
    value: '1'
  - key: google-readability-function-size.StatementThreshold
    value: '800'
  - key: google-readability-namespace-comments.ShortNamespaceLines
    value: '10'
  - key: google-readability-namespace-comments.SpacesBeforeComments
    value: '2'

  # Misc options
  - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value: true
  - key: misc-throw-by-value-catch-by-reference.CheckThrowTemporaries
    value: true

  # CERT options
  - key: cert-dcl16-c.NewSuffixes
    value: 'L;LL;LU;LLU'
  - key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField
    value: false

  # Bugprone options
  - key: bugprone-argument-comment.CommentBoolLiterals
    value: true
  - key: bugprone-argument-comment.CommentIntegerLiterals
    value: true
  - key: bugprone-argument-comment.CommentFloatLiterals
    value: true
  - key: bugprone-argument-comment.CommentUserDefinedLiterals
    value: true
  - key: bugprone-argument-comment.CommentStringLiterals
    value: true
  - key: bugprone-argument-comment.CommentCharacterLiterals
    value: true
  - key: bugprone-argument-comment.CommentNullPtrs
    value: true
  - key: bugprone-assert-side-effect.AssertMacros
    value: 'assert,NSAssert,NSCAssert'
  - key: bugprone-dangling-handle.HandleClasses
    value: 'std::basic_string_view;std::experimental::basic_string_view'
  - key: bugprone-exception-escape.FunctionsThatShouldNotThrow
    value: ''
  - key: bugprone-exception-escape.IgnoredExceptions
    value: ''
  - key: bugprone-misplaced-widening-cast.CheckImplicitCasts
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfConstant
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfThis
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant
    value: true
  - key: bugprone-string-constructor.WarnOnLargeLength
    value: true
  - key: bugprone-string-constructor.LargeLengthThreshold
    value: '0x800000'
  - key: bugprone-suspicious-enum-usage.StrictMode
    value: false
  - key: bugprone-suspicious-missing-comma.SizeThreshold
    value: '5'
  - key: bugprone-suspicious-missing-comma.RatioThreshold
    value: '0.2'
  - key: bugprone-suspicious-missing-comma.MaxConcatenatedTokens
    value: '5'
  - key: bugprone-suspicious-string-compare.WarnOnImplicitComparison
    value: true
  - key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison
    value: true
  - key: bugprone-too-small-loop-variable.MagnitudeBitsUpperLimit
    value: '16'

  # CppCoreGuidelines options
  - key: cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors
    value: true
  - key: cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted
    value: true
