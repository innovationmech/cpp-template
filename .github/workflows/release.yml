# =============================================================================
# Release Workflow - Build, Package and Release on Tag
# This workflow builds packages and creates GitHub releases when tags are pushed.
#
# Usage:
# - Create a tag manually: git tag -a v1.2.3 -m "Release v1.2.3"
# - Push the tag: git push origin v1.2.3
# - Or create a release tag directly on GitHub
#
# Supported Platforms: Ubuntu, Windows, macOS
# Package Formats: TGZ, ZIP, DEB, RPM, DMG, NSIS (platform dependent)
# =============================================================================

name: Release

on:
  push:
    tags:
      - 'v*'

# Concurrency control - avoid canceling running builds to prevent instability
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Set permissions for GITHUB_TOKEN
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:

  # =============================================================================
  # Multi-Platform Build and Package
  # =============================================================================
  build:
    name: Build and Package (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu - Latest LTS
          - os: ubuntu-24.04
            name: linux
            cmake_preset: default
            package_formats: "TGZ;DEB"
            artifact_pattern: "build/cpp-template-*-linux-x64.*"

          # Windows - Latest
          - os: windows-2022
            name: windows
            cmake_preset: default
            package_formats: "ZIP;NSIS"
            artifact_pattern: "build/cpp-template-*-windows-x64.*"

          # macOS - Latest
          - os: macos-14
            name: macos
            cmake_preset: default
            package_formats: "TGZ;DragNDrop"
            artifact_pattern: "build/cpp-template-*-macos-*.*"

    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache LLVM and Clang (Linux)
        if: runner.os == 'Linux'
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: |
            C:/Program Files/LLVM
            ./llvm
          key: llvm-17-${{ runner.os }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libgtest-dev \
            libgmock-dev

      - name: Install LLVM and Clang (Linux)
        if: runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libtool \
            autoconf \
            dpkg-dev \
            rpm

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja pkg-config

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install ninja

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DENABLE_CLANG_TIDY=OFF \
            -DENABLE_CPPCHECK=OFF \
            -G Ninja

      - name: Build project
        run: cmake --build build --config Release --parallel

      - name: Run tests
        run: cmake --build build --target test --config Release
        continue-on-error: true

      - name: Install project
        run: cmake --install build --config Release

      - name: Create packages
        run: |
          cd build
          cpack -G "${{ matrix.package_formats }}" -C Release -V
        env:
          CPACK_GENERATOR: ${{ matrix.package_formats }}

      - name: List generated packages
        shell: bash
        run: |
          echo "📦 Generated packages:"
          find build -name "cpp-template-*" -type f | sort

      - name: Check for generated packages
        id: check_packages
        run: |
          echo "🔍 Checking for generated packages..."
          if [ -d "build" ]; then
            package_count=$(find build -name "cpp-template-*" -type f | wc -l)
            echo "Found $package_count package files"

            if [ "$package_count" -gt 0 ]; then
              echo "✅ Packages found:"
              find build -name "cpp-template-*" -type f | sort
              echo "has_packages=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ No packages found in build directory"
              echo "Build directory contents:"
              ls -la build/ || echo "Build directory does not exist"
              echo "has_packages=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Build directory not found"
            echo "has_packages=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
        if: always()

      - name: Upload packages as artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.check_packages.outputs.has_packages == 'true'
        with:
          name: packages-${{ matrix.name }}
          path: |
            build/cpp-template-*
            !build/**/*.dir/
            !build/**/CMakeFiles/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.name }}
          path: |
            build/**/*.log
            build/CMakeCache.txt
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log
          retention-days: 7
          if-no-files-found: ignore

  # =============================================================================
  # Create GitHub Release
  # =============================================================================
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success' || needs.build.result == 'failure')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug environment
        run: |
          echo "🔍 Environment Information:"
          echo "GitHub Event: ${{ github.event_name }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
          echo "GitHub Ref Type: ${{ github.ref_type }}"
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Build Job Result: ${{ needs.build.result }}"
          echo ""
          echo "🏗️ Build Job Matrix Results:"
          echo "Build outputs: ${{ toJSON(needs.build.outputs) }}"

      - name: Check permissions and environment
        run: |
          echo "🔐 Checking GitHub permissions..."

          # Check if we have the necessary permissions
          echo "GITHUB_TOKEN permissions:"
          echo "- contents: write (required for creating releases)"
          echo "- packages: write (available for package operations)"

          # Verify this is a tag push
          if [[ "${{ github.ref_type }}" != "tag" ]]; then
            echo "⚠️  WARNING: This workflow should only run on tag pushes"
            echo "Current ref type: ${{ github.ref_type }}"
          else
            echo "✅ Running on tag push: ${{ github.ref_name }}"
          fi

          # Check tag format
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "✅ Tag format is valid: ${{ github.ref_name }}"
          else
            echo "⚠️  Tag format may not be standard: ${{ github.ref_name }}"
            echo "Recommended format: v1.2.3"
          fi

          echo ""
          echo "🎯 Release target: ${{ github.ref_name }}"

      - name: Extract version from tag
        id: version
        run: |
          # Get tag name from ref (e.g., v1.2.3)
          tag_name="${{ github.ref_name }}"
          # Remove 'v' prefix to get version (e.g., 1.2.3)
          version=${tag_name#v}

          echo "Tag: $tag_name"
          echo "Version: $version"

          echo "tag=$tag_name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          current_tag="${{ github.ref_name }}"
          previous_tag=$(git describe --tags --abbrev=0 $current_tag^ 2>/dev/null || echo "")

          if [ -n "$previous_tag" ]; then
            echo "Generating changelog from $previous_tag to $current_tag"
            changelog=$(git log $previous_tag..$current_tag --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "No previous tag found, showing last 10 commits"
            changelog=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi

          # Save changelog for multiline output
          echo "changelog<<CHANGELOG_EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "CHANGELOG_EOF" >> $GITHUB_OUTPUT

      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/
        continue-on-error: true

      - name: Verify and display downloaded artifacts
        id: verify_artifacts
        run: |
          echo "📁 Checking downloaded artifacts..."

          if [ ! -d "packages/" ]; then
            echo "❌ No packages directory found!"
            echo "artifact_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📦 Downloaded artifacts structure:"
          find packages/ -type f | sort

          artifact_count=$(find packages/ -type f -name "cpp-template-*" | wc -l)
          echo "Found $artifact_count package files"
          echo "artifact_count=$artifact_count" >> $GITHUB_OUTPUT

          if [ "$artifact_count" -eq 0 ]; then
            echo "⚠️ No package files found matching pattern 'cpp-template-*'"
            echo "All files in packages/:"
            find packages/ -type f | head -20
          else
            echo "✅ Found $artifact_count package files:"
            find packages/ -type f -name "cpp-template-*" | sort
          fi

      - name: Prepare release assets
        id: prepare_assets
        if: steps.verify_artifacts.outputs.artifact_count > 0
        run: |
          echo "📦 Preparing release assets..."
          mkdir -p release_assets/

          # Copy all package files to release_assets directory
          find packages/ -type f -name "cpp-template-*" -exec cp {} release_assets/ \;

          echo "Release assets prepared:"
          ls -la release_assets/

          # Create a list of files for the release
          asset_files=""
          for file in release_assets/*; do
            if [ -f "$file" ]; then
              asset_files="$asset_files$file\n"
            fi
          done

          echo "Asset files list:"
          echo -e "$asset_files"

          echo "assets_ready=true" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        if: always()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Release ${{ steps.version.outputs.tag }}"
          body: |
            ## 🚀 Release ${{ steps.version.outputs.tag }}

            Automatically generated release from tag push.

            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}

            ### 🏗️ Build Status
            - Build job result: ${{ needs.build.result }}
            - Available packages: ${{ steps.verify_artifacts.outputs.artifact_count || 'N/A' }}

            ### 📦 Package Downloads
            ${{ steps.verify_artifacts.outputs.artifact_count > 0 && '- **Linux**: TGZ archive and DEB package
            - **Windows**: ZIP archive and NSIS installer
            - **macOS**: TGZ archive and DMG disk image' || '⚠️ No packages available due to build failures' }}

            ### 🔧 Installation

            ${{ steps.verify_artifacts.outputs.artifact_count > 0 && '**Linux (Ubuntu/Debian):**
            ```bash
            # Using DEB package
            sudo dpkg -i cpp-template-*-linux-x64.deb

            # Using TGZ archive
            tar -xzf cpp-template-*-linux-x64.tar.gz
            ```

            **Windows:**
            ```cmd
            # Using installer
            cpp-template-*-windows-x64.exe

            # Using ZIP archive
            unzip cpp-template-*-windows-x64.zip
            ```

            **macOS:**
            ```bash
            # Using DMG
            open cpp-template-*-macos-*.dmg

            # Using TGZ archive
            tar -xzf cpp-template-*-macos-*.tar.gz
            ```' || 'Packages will be available when builds are successful.' }}

            ---
            🤖 Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false
          files: |
            ${{ steps.prepare_assets.outputs.assets_ready == 'true' && 'release_assets/*' || '' }}
          fail_on_unmatched_files: false
          generate_release_notes: true

      - name: Release Summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in packages/**/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(ls -lh "$file" | awk '{print $5}')
              echo "- **$filename** ($filesize)" >> $GITHUB_STEP_SUMMARY
            fi
          done
