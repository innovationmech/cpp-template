# =============================================================================
# Release Workflow - Build, Package and Release on Tag
# This workflow builds packages and creates GitHub releases when tags are pushed.
#
# Usage:
# - Create a tag manually: git tag -a v1.2.3 -m "Release v1.2.3"
# - Push the tag: git push origin v1.2.3
# - Or create a release tag directly on GitHub
#
# Supported Platforms: Ubuntu, Windows, macOS
# Package Formats: TGZ, ZIP, DEB, RPM, DMG, NSIS (platform dependent)
# =============================================================================

name: Release

on:
  push:
    tags:
      - 'v*'

# Concurrency control - avoid canceling running builds to prevent instability
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Set permissions for GITHUB_TOKEN
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:

  # =============================================================================
  # Multi-Platform Build and Package
  # =============================================================================
  build:
    name: Build and Package
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu - Latest LTS
          - os: ubuntu-24.04
            name: linux
            cmake_preset: default
            package_formats: "TGZ;DEB"
            artifact_pattern: "build/cpp-template-*-linux-x64.*"

          # Windows - Latest
          - os: windows-2022
            name: windows
            cmake_preset: default
            package_formats: "ZIP;NSIS"
            artifact_pattern: "build/cpp-template-*-windows-x64.*"

          # macOS - Latest
          - os: macos-14
            name: macos
            cmake_preset: default
            package_formats: "TGZ;DragNDrop"
            artifact_pattern: "build/cpp-template-*-macos-*.*"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache LLVM and Clang (Linux)
        if: runner.os == 'Linux'
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: |
            C:/Program Files/LLVM
            ./llvm
          key: llvm-17-${{ runner.os }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libgtest-dev \
            libgmock-dev

      - name: Install LLVM and Clang (Linux)
        if: runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libtool \
            autoconf \
            dpkg-dev \
            rpm

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja pkg-config

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install ninja

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DENABLE_CLANG_TIDY=OFF \
            -DENABLE_CPPCHECK=OFF \
            -G Ninja

      - name: Build project
        run: cmake --build build --config Release --parallel

      - name: Run tests
        run: cmake --build build --target test --config Release
        continue-on-error: true

      - name: Install project
        run: cmake --install build --config Release

      - name: Create packages
        run: |
          cd build
          cpack -G "${{ matrix.package_formats }}" -C Release -V
        env:
          CPACK_GENERATOR: ${{ matrix.package_formats }}

      - name: List generated packages
        shell: bash
        run: |
          echo "📦 Generated packages:"
          find build -name "cpp-template-*" -type f | sort

      - name: Upload packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.name }}
          path: |
            build/cpp-template-*
            !build/**/*.dir/
            !build/**/CMakeFiles/
          retention-days: 30

  # =============================================================================
  # Create GitHub Release
  # =============================================================================
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          # Get tag name from ref (e.g., v1.2.3)
          tag_name="${{ github.ref_name }}"
          # Remove 'v' prefix to get version (e.g., 1.2.3)
          version=${tag_name#v}

          echo "Tag: $tag_name"
          echo "Version: $version"

          echo "tag=$tag_name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          current_tag="${{ github.ref_name }}"
          previous_tag=$(git describe --tags --abbrev=0 $current_tag^ 2>/dev/null || echo "")

          if [ -n "$previous_tag" ]; then
            echo "Generating changelog from $previous_tag to $current_tag"
            changelog=$(git log $previous_tag..$current_tag --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "No previous tag found, showing last 10 commits"
            changelog=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi

          # Save changelog for multiline output
          echo "changelog<<CHANGELOG_EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "CHANGELOG_EOF" >> $GITHUB_OUTPUT

      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/

      - name: Display downloaded artifacts
        run: |
          echo "📁 Downloaded artifacts:"
          find packages/ -type f | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Release ${{ steps.version.outputs.tag }}"
          body: |
            ## 🚀 Release ${{ steps.version.outputs.tag }}

            Automatically generated release from tag push.

            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}

            ### 📦 Package Downloads
            - **Linux**: TGZ archive and DEB package
            - **Windows**: ZIP archive and NSIS installer
            - **macOS**: TGZ archive and DMG disk image

            ### 🔧 Installation

            **Linux (Ubuntu/Debian):**
            ```bash
            # Using DEB package
            sudo dpkg -i cpp-template-*-linux-x64.deb

            # Using TGZ archive
            tar -xzf cpp-template-*-linux-x64.tar.gz
            ```

            **Windows:**
            ```cmd
            # Using installer
            cpp-template-*-windows-x64.exe

            # Using ZIP archive
            unzip cpp-template-*-windows-x64.zip
            ```

            **macOS:**
            ```bash
            # Using DMG
            open cpp-template-*-macos-*.dmg

            # Using TGZ archive
            tar -xzf cpp-template-*-macos-*.tar.gz
            ```

            ---
            🤖 Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false
          files: |
            packages/**/*

      - name: Release Summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in packages/**/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(ls -lh "$file" | awk '{print $5}')
              echo "- **$filename** ($filesize)" >> $GITHUB_STEP_SUMMARY
            fi
          done
