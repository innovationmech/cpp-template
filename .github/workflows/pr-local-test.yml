# =============================================================================
# PR Local Test Workflow - Simplified PR testing for local development
# This workflow provides a lightweight version of PR tests that can be run
# locally with act for quick validation before pushing changes.
#
# Usage with act:
#   act pull_request -j pr-quick-test
#   act pull_request -j pr-build-test
# =============================================================================

name: PR Local Test

on:
  workflow_dispatch:  # Allow manual triggering only

jobs:
  # =============================================================================
  # Quick Test - Fast validation for local development
  # =============================================================================
  pr-quick-test:
    name: Quick PR Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libgtest-dev \
            libgmock-dev

      - name: Configure CMake (Debug)
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTING=ON -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -G Ninja

      - name: Build project
        run: |
          cmake --build build --parallel 1

      - name: Run quick tests
        working-directory: build
        run: |
          echo "Running quick test suite..."
          ctest --build-config Debug --parallel 1 --timeout 120 --output-on-failure

      - name: Test basic functionality
        working-directory: build
        run: |
          echo "Testing basic executable..."
          if [ -f "bin/cpp-template" ]; then
            ./bin/cpp-template --help || echo "Help command test completed"
          elif [ -f "cpp-template" ]; then
            ./cpp-template --help || echo "Help command test completed"
          else
            echo "Executable not found, checking build output..."
            find . -name "cpp-template*" -type f -executable
          fi

  # =============================================================================
  # Build Test - Cross-configuration testing
  # =============================================================================
  pr-build-test:
    name: PR Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config

      - name: Configure CMake (${{ matrix.build_type }})
        run: |
          cmake -B build-${{ matrix.build_type }} -S . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=install-${{ matrix.build_type }} -DBUILD_TESTING=ON -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -G Ninja

      - name: Build project (${{ matrix.build_type }})
        run: |
          cmake --build build-${{ matrix.build_type }} --parallel 1

      - name: Run tests (${{ matrix.build_type }})
        working-directory: build-${{ matrix.build_type }}
        run: |
          ctest --build-config ${{ matrix.build_type }} --parallel 1 --timeout 180 --output-on-failure

      - name: Test installation (${{ matrix.build_type }})
        run: |
          cmake --install build-${{ matrix.build_type }}

          echo "Installed files:"
          find install-${{ matrix.build_type }} -type f | sort

      - name: Create package (${{ matrix.build_type }})
        working-directory: build-${{ matrix.build_type }}
        run: |
          echo "Creating TGZ package..."
          cpack -G TGZ -C ${{ matrix.build_type }} || echo "Package creation completed with warnings"

          echo "Generated packages:"
          find . -name "*.tar.gz" -o -name "*.tgz" | head -5

  # =============================================================================
  # Integration Test - Simplified integration testing
  # =============================================================================
  pr-integration-test:
    name: PR Integration Test
    runs-on: ubuntu-latest
    needs: [pr-quick-test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libgtest-dev \
            libgmock-dev \
            cppcheck

      - name: Configure for integration testing
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -G Ninja

      - name: Build for integration testing
        run: |
          cmake --build build --parallel 1

      - name: Run integration tests
        working-directory: build
        run: |
          echo "Running integration tests..."
          ctest -L "integration" --parallel 1 --timeout 300 --output-on-failure || echo "Integration tests completed"

      - name: Basic static analysis
        run: |
          echo "Running basic static analysis..."
          if command -v cppcheck >/dev/null 2>&1; then
            cppcheck --enable=warning,style \
                     --suppress=missingIncludeSystem \
                     --suppress=unusedFunction \
                     --exclude=third_party \
                     --exclude=build \
                     --quiet \
                     src/ libs/ || echo "Static analysis completed with warnings"
          else
            echo "cppcheck not available, skipping static analysis"
          fi

      - name: Test examples
        working-directory: build
        run: |
          echo "Testing example programs..."

          # Find and test example executables
          for example in $(find . -path "*/examples/*" -type f -executable 2>/dev/null | head -3); do
            echo "Testing $example..."
            timeout 30s "$example" || echo "Example $example test completed"
          done
