# =============================================================================
# .pre-commit-config.yaml - Pre-commit Hooks Configuration
# Automated code quality checks that run before each commit
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Usage:
#   pre-commit run --all-files  # Run on all files
#   pre-commit run              # Run on staged files only
#   git commit                  # Runs automatically
#
# To skip hooks for emergency commits:
#   git commit --no-verify
# =============================================================================

# Repository configuration
repos:
  # =============================================================================
  # General Code Quality Hooks
  # =============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File and content checks
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Removes trailing whitespace from files
        exclude: ^(third_party/|build/|\.git/)

      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensures files end with a newline
        exclude: ^(third_party/|build/|\.git/)

      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Checks for merge conflict markers

      - id: check-case-conflict
        name: Check case conflicts
        description: Checks for case-insensitive filename conflicts

      - id: check-symlinks
        name: Check broken symlinks
        description: Checks for broken symbolic links

      - id: check-added-large-files
        name: Check for large files
        description: Prevents adding large files (default 500kB)
        args: ['--maxkb=1000']  # Allow up to 1MB files

      # File format validation
      - id: check-yaml
        name: Validate YAML files
        description: Validates YAML file syntax
        exclude: ^(third_party/|build/)

      - id: check-json
        name: Validate JSON files
        description: Validates JSON file syntax
        exclude: ^(third_party/|build/)

      - id: check-toml
        name: Validate TOML files
        description: Validates TOML file syntax
        exclude: ^(third_party/|build/)

      - id: check-xml
        name: Validate XML files
        description: Validates XML file syntax
        exclude: ^(third_party/|build/)

      # Security checks
      - id: detect-private-key
        name: Detect private keys
        description: Detects presence of private keys

      # Script validation
      - id: check-executables-have-shebangs
        name: Check executable shebangs
        description: Ensures executables have shebangs
        exclude: ^(third_party/|build/|\.git/)

      - id: check-shebang-scripts-are-executable
        name: Check shebang executability
        description: Ensures shebang scripts are executable
        exclude: ^(third_party/|build/|\.git/)

  # =============================================================================
  # C++ Code Formatting with clang-format
  # =============================================================================
  - repo: https://github.com/pre-commit/mirrors-clang-format
    rev: v17.0.6
    hooks:
      - id: clang-format
        name: Format C++ code
        description: Formats C++ code using clang-format
        files: \.(cpp|hpp|h|cxx|hxx|cc|c\+\+|h\+\+)$
        exclude: ^(third_party/|build/)
        args: [--style=file, -i]

  # =============================================================================
  # CMake Formatting
  # =============================================================================
  - repo: https://github.com/cheshirekow/cmake-format-precommit
    rev: v0.6.13
    hooks:
      - id: cmake-format
        name: Format CMake files
        description: Formats CMake files using cmake-format
        files: (CMakeLists\.txt|\.cmake)$
        exclude: ^(third_party/|build/)
        args: [--config-file, .cmake-format.yaml, --in-place]
        additional_dependencies: [pyyaml]

      - id: cmake-lint
        name: Lint CMake files
        description: Lints CMake files for common issues
        files: (CMakeLists\.txt|\.cmake)$
        exclude: ^(third_party/|build/)
        args: [--config-file, .cmake-format.yaml]
        additional_dependencies: [pyyaml]

  # =============================================================================
  # Shell Script Formatting and Linting
  # =============================================================================
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Lint shell scripts
        description: Lints shell scripts with ShellCheck
        files: \.(sh|bash|zsh|ksh)$
        exclude: ^(third_party/|build/)
        args: [--severity=warning]

  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.7.0-4
    hooks:
      - id: shfmt
        name: Format shell scripts
        description: Formats shell scripts with shfmt
        files: \.(sh|bash|zsh|ksh)$
        exclude: ^(third_party/|build/)
        args: [--write, --indent=4, --case-indent]

  # =============================================================================
  # Documentation and Markdown
  # =============================================================================
  # markdownlint disabled per user request

  # =============================================================================
  # Git Hooks
  # =============================================================================
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.12.0
    hooks:
      - id: commitizen
        name: Check commit message format
        description: Validates commit message format
        stages: [commit-msg]

  # =============================================================================
  # Local Custom Hooks
  # =============================================================================
  - repo: local
    hooks:
      # Custom C++ static analysis hook
      - id: clang-tidy-check
        name: C++ Static Analysis (clang-tidy)
        description: Runs clang-tidy on changed C++ files
        entry: bash -c
        args:
          - |
            if command -v clang-tidy >/dev/null 2>&1; then
              # Only run on C++ source files that have changed
              changed_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|cxx|cc|c\+\+)$' | grep -v '^third_party/' || true)
              if [ -n "$changed_files" ]; then
                echo "Running clang-tidy on changed files..."
                if [ -f "build/compile_commands.json" ]; then
                  clang-tidy --config-file=.clang-tidy -p build $changed_files
                else
                  echo "Warning: build/compile_commands.json not found. Run 'cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON' first."
                  echo "Skipping clang-tidy check."
                fi
              else
                echo "No C++ source files changed."
              fi
            else
              echo "clang-tidy not found, skipping static analysis."
            fi
        language: system
        files: \.(cpp|cxx|cc|c\+\+)$
        exclude: ^(third_party/|build/)
        pass_filenames: false
        stages: [pre-commit]

      # Custom cppcheck hook
      - id: cppcheck-check
        name: C++ Additional Static Analysis (cppcheck)
        description: Runs cppcheck on changed C++ files
        entry: bash -c
        args:
          - |
            if command -v cppcheck >/dev/null 2>&1; then
              changed_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|hpp|h|cxx|hxx|cc|c\+\+|h\+\+)$' | grep -v '^third_party/' || true)
              if [ -n "$changed_files" ]; then
                echo "Running cppcheck on changed files..."
                cppcheck --enable=warning,style,performance,portability \
                         --std=c++17 \
                         --quiet \
                         --inline-suppr \
                         --suppressions-list=.cppcheck-suppressions \
                         --error-exitcode=1 \
                         $changed_files
              else
                echo "No C++ files changed."
              fi
            else
              echo "cppcheck not found, skipping additional static analysis."
            fi
        language: system
        files: \.(cpp|hpp|h|cxx|hxx|cc|c\+\+|h\+\+)$
        exclude: ^(third_party/|build/)
        pass_filenames: false
        stages: [pre-commit]

      # Build test hook
      - id: build-test
        name: Build and Test
        description: Ensures project builds and tests pass
        entry: bash -c
        args:
          - |
            echo "Running build and test check..."
            if [ ! -d "build" ]; then
              echo "Creating build directory..."
              cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
            fi

            echo "Building project..."
            if cmake --build build --target all; then
              echo "Build successful."

              echo "Running tests..."
              if cmake --build build --target test; then
                echo "All tests passed."
              else
                echo "Tests failed!"
                exit 1
              fi
            else
              echo "Build failed!"
              exit 1
            fi
        language: system
        files: \.(cpp|hpp|h|cxx|hxx|cc|c\+\+|h\+\+|CMakeLists\.txt|\.cmake)$
        exclude: ^(third_party/|build/)
        pass_filenames: false
        stages: [pre-commit]

# =============================================================================
# Configuration
# =============================================================================

# Fail fast - stop on first failure
fail_fast: false

# Default language version (can be overridden per hook)
default_language_version:
  python: python3

# Exclude patterns (global)
exclude: |
  (?x)^(
    third_party/.*|
    build/.*|
    \.git/.*|
    .*\.min\..*|
    .*\.generated\..*
  )$

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
